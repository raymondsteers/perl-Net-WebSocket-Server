.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::WebSocket::Server::Connection 3pm"
.TH Net::WebSocket::Server::Connection 3pm "2017-03-06" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::WebSocket::Server::Connection \- A WebSocket connection managed by Net::WebSocket::Server.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Within the connect callback of a
Net::WebSocket::Server,
.PP
.Vb 6
\&    $conn\->on(
\&        utf8 => sub {
\&            my ($conn, $msg) = @_;
\&            $conn\->send_utf8($msg);
\&        },
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an interface to a WebSocket connection including
handshakes and sending / receiving messages.  It is constructed by a running
Net::WebSocket::Server and passed to the registered
connect handler there for configuration.
.SH "CONSTRUCTION"
.IX Header "CONSTRUCTION"
.ie n .IP """Net::WebSocket::Server::Connection\->new(\f(CI%opts\f(CW)""" 4
.el .IP "\f(CWNet::WebSocket::Server::Connection\->new(\f(CI%opts\f(CW)\fR" 4
.IX Item "Net::WebSocket::Server::Connection->new(%opts)"
Creates a new \f(CW\*(C`Net::WebSocket::Server::Connection\*(C'\fR object with the given
configuration.  This is typically done for you by
Net::WebSocket::Server; you rarely need to construct
your own explicitly.  Takes the following parameters:
.RS 4
.ie n .IP """socket""" 4
.el .IP "\f(CWsocket\fR" 4
.IX Item "socket"
The underlying IO::Socket\-like object.  Once set, this cannot be
changed.  Required.
.ie n .IP """server""" 4
.el .IP "\f(CWserver\fR" 4
.IX Item "server"
The associated Net::WebSocket::Server object.  Once
set, this cannot be changed.  Required.
.ie n .IP """nodelay""" 4
.el .IP "\f(CWnodelay\fR" 4
.IX Item "nodelay"
A boolean value indicating whether \f(CW\*(C`TCP_NODELAY\*(C'\fR should be set on the socket
after the handshake is complete.  Default \f(CW1\fR.  See \fInodelay()\fR.
.ie n .IP """max_send_size""" 4
.el .IP "\f(CWmax_send_size\fR" 4
.IX Item "max_send_size"
The maximum size of an outgoing payload.  Default
\&\f(CW\*(C`Protocol::WebSocket::Frame\->new\->{max_payload_size}\*(C'\fR.
.Sp
When building an outgoing message, this value is passed to new instances of
Protocol::WebSocket::Frame as the
\&\f(CW\*(C`max_payload_size\*(C'\fR parameter.
.ie n .IP """max_recv_size""" 4
.el .IP "\f(CWmax_recv_size\fR" 4
.IX Item "max_recv_size"
The maximum size of an incoming payload.  Default
\&\f(CW\*(C`Protocol::WebSocket::Frame\->new\->{max_payload_size}\*(C'\fR.
.Sp
Once the handshake process is complete, this value is passed to the parser
instance of Protocol::WebSocket::Frame as the
\&\f(CW\*(C`max_payload_size\*(C'\fR parameter.
.ie n .IP """on_\f(CW$event\f(CW""" 4
.el .IP "\f(CWon_\f(CW$event\f(CW\fR" 4
.IX Item "on_$event"
The callback to invoke when the given \f(CW$event\fR occurs, such as \f(CW\*(C`ready\*(C'\fR.  See
\&\*(L"\s-1EVENTS\*(R"\s0.
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """on(\f(CI%events\f(CW)""" 4
.el .IP "\f(CWon(\f(CI%events\f(CW)\fR" 4
.IX Item "on(%events)"
.Vb 3
\&    $connection\->on(
\&        utf8 => sub { ... },
\&    ),
.Ve
.Sp
Takes a list of \f(CW\*(C`$event => $callback\*(C'\fR pairs; \f(CW$event\fR names should not
include an \f(CW\*(C`on_\*(C'\fR prefix.  See \*(L"\s-1EVENTS\*(R"\s0.
.ie n .IP """server()""" 4
.el .IP "\f(CWserver()\fR" 4
.IX Item "server()"
Returns the associated Net::WebSocket::Server object.
.ie n .IP """socket()""" 4
.el .IP "\f(CWsocket()\fR" 4
.IX Item "socket()"
Returns the underlying socket object.
.ie n .IP """is_ready()""" 4
.el .IP "\f(CWis_ready()\fR" 4
.IX Item "is_ready()"
Returns true if the connection is fully established and ready for data, or
false if the connection is in the middle of the handshake process.
.ie n .IP """ip()""" 4
.el .IP "\f(CWip()\fR" 4
.IX Item "ip()"
Returns the connected remote \s-1IP\s0 as a string or \f(CW\*(Aq0.0.0.0\*(Aq\fR with no active
connection.
.ie n .IP """port()""" 4
.el .IP "\f(CWport()\fR" 4
.IX Item "port()"
Returns the connected remote port or \f(CW0\fR with no active connection. (This will
be some high-numbered port chosen by the remote host; it can be useful during
debugging to help humans tell apart connections from the same \s-1IP.\s0)
.ie n .IP """nodelay([\f(CI$enable\f(CW])""" 4
.el .IP "\f(CWnodelay([\f(CI$enable\f(CW])\fR" 4
.IX Item "nodelay([$enable])"
A boolean value indicating whether \f(CW\*(C`TCP_NODELAY\*(C'\fR should be set on the socket
after the handshake is complete.  If the handshake is already complete,
immediately modifies the socket's \f(CW\*(C`TCP_NODELAY\*(C'\fR setting.
.Sp
This setting indicates to the operating system that small packets should not be
delayed for bundling into fewer, larger packets, but should instead be sent
immediately.  While enabling this setting can incur additional strain on the
network, it tends to be the desired behavior for WebSocket servers, so it is
enabled by default.
.ie n .IP """max_send_size([\f(CI$size\f(CW])""" 4
.el .IP "\f(CWmax_send_size([\f(CI$size\f(CW])\fR" 4
.IX Item "max_send_size([$size])"
Sets the maximum allowed size of an outgoing payload.  Returns the current or
newly-set value.
.Sp
When building an outgoing message, this value is passed to new instances of
Protocol::WebSocket::Frame as the
\&\f(CW\*(C`max_payload_size\*(C'\fR parameter.
.ie n .IP """max_recv_size([\f(CI$size\f(CW])""" 4
.el .IP "\f(CWmax_recv_size([\f(CI$size\f(CW])\fR" 4
.IX Item "max_recv_size([$size])"
Sets the maximum allowed size of an incoming payload.  Returns the current or
newly-set value.
.Sp
Once the handshake process is complete, this value is passed to the parser
instance of Protocol::WebSocket::Frame as the
\&\f(CW\*(C`max_payload_size\*(C'\fR parameter.
.Sp
This value cannot be modified once the handshake is completed.
.ie n .IP """disconnect(\f(CI$code\f(CW, \f(CI$reason\f(CW)""" 4
.el .IP "\f(CWdisconnect(\f(CI$code\f(CW, \f(CI$reason\f(CW)\fR" 4
.IX Item "disconnect($code, $reason)"
Invokes the registered \f(CW\*(C`disconnect\*(C'\fR handler, sends a \f(CW\*(C`close\*(C'\fR packet with the
given \f(CW$code\fR and \f(CW$reason\fR, and disconnects the socket.
.ie n .IP """send_utf8(\f(CI$message\f(CW)""" 4
.el .IP "\f(CWsend_utf8(\f(CI$message\f(CW)\fR" 4
.IX Item "send_utf8($message)"
Sends a \f(CW\*(C`utf8\*(C'\fR message with the given content.  The message will be
UTF8\-encoded automatically.
.ie n .IP """send_binary(\f(CI$message\f(CW)""" 4
.el .IP "\f(CWsend_binary(\f(CI$message\f(CW)\fR" 4
.IX Item "send_binary($message)"
Sends a \f(CW\*(C`binary\*(C'\fR message with the given content.
.ie n .IP """send(\f(CI$type\f(CW, \f(CI$raw_data\f(CW)""" 4
.el .IP "\f(CWsend(\f(CI$type\f(CW, \f(CI$raw_data\f(CW)\fR" 4
.IX Item "send($type, $raw_data)"
Sends a message with the given type and content.  Typically, one should use the
\&\fIsend_utf8()\fR and \fIsend_binary()\fR methods instead.
.ie n .IP """recv()""" 4
.el .IP "\f(CWrecv()\fR" 4
.IX Item "recv()"
Attempts to read from the socket, invoking callbacks for any received messages.
The associated Net::WebSocket::Server will call this
automatically when data is ready to be read.
.SH "EVENTS"
.IX Header "EVENTS"
Attach a callback for an event by either passing \f(CW\*(C`on_$event\*(C'\fR parameters to the
constructor or by passing \f(CW$event\fR parameters to the \fIon()\fR method.
.ie n .IP """handshake(\f(CI$connection\f(CW, \f(CI$handshake\f(CW)""" 4
.el .IP "\f(CWhandshake(\f(CI$connection\f(CW, \f(CI$handshake\f(CW)\fR" 4
.IX Item "handshake($connection, $handshake)"
Invoked when a handshake message has been received from the client; the
\&\f(CW$handshake\fR parameter is the underlying
Protocol::WebSocket::Handshake::Server
object.  Use this event to inspect the handshake origin, cookies, etc for
validity.  To abort the handshake process, call
\&\f(CW$connection\fR\->\fIdisconnect()\fR.
.Sp
For example:
.Sp
.Vb 4
\&    if ($handshake\->req\->origin ne $expected_origin) {
\&      $connection\->disconnect();
\&      return;
\&    }
\&
\&    if ($handshake\->req\->subprotocol ne $expected_subprotocol) {
\&      $connection\->disconnect();
\&      return;
\&    }
.Ve
.ie n .IP """ready(\f(CI$connection\f(CW)""" 4
.el .IP "\f(CWready(\f(CI$connection\f(CW)\fR" 4
.IX Item "ready($connection)"
Invoked when the handshake has been completed and the connection is ready to
send and receive WebSocket messages.  Use this event to perform any final
initialization or for the earliest chance to send messages to the client.
.ie n .IP """disconnect(\f(CI$connection\f(CW, \f(CI$code\f(CW, \f(CI$reason\f(CW)""" 4
.el .IP "\f(CWdisconnect(\f(CI$connection\f(CW, \f(CI$code\f(CW, \f(CI$reason\f(CW)\fR" 4
.IX Item "disconnect($connection, $code, $reason)"
Invoked when the connection is disconnected for any reason.  The \f(CW$code\fR and
\&\f(CW$reason\fR, if any, are also provided.  Use this event for last-minute cleanup
of the connection, but by this point it may not be safe to assume that sent
messages will be received.
.ie n .IP """utf8(\f(CI$connection\f(CW, \f(CI$message\f(CW)""" 4
.el .IP "\f(CWutf8(\f(CI$connection\f(CW, \f(CI$message\f(CW)\fR" 4
.IX Item "utf8($connection, $message)"
Invoked when a \f(CW\*(C`utf8\*(C'\fR message is received from the client.  The \f(CW$message\fR,
if any, is decoded and provided.
.ie n .IP """binary(\f(CI$connection\f(CW, \f(CI$message\f(CW)""" 4
.el .IP "\f(CWbinary(\f(CI$connection\f(CW, \f(CI$message\f(CW)\fR" 4
.IX Item "binary($connection, $message)"
Invoked when a \f(CW\*(C`binary\*(C'\fR message is received from the client.  The \f(CW$message\fR,
if any, is provided.
.ie n .IP """pong(\f(CI$connection\f(CW, \f(CI$message\f(CW)""" 4
.el .IP "\f(CWpong(\f(CI$connection\f(CW, \f(CI$message\f(CW)\fR" 4
.IX Item "pong($connection, $message)"
Invoked when a \f(CW\*(C`pong\*(C'\fR message is received from the client.  The \f(CW$message\fR,
if any, is provided.  If the associated
Net::WebSocket::Server object is configured with a
nonzero silence_max, this event will
also occur in response to the \f(CW\*(C`ping\*(C'\fR messages automatically sent to keep the
connection alive.
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Wastl, \f(CW\*(C`<topaz at cpan.org>\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::WebSocket::Server
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Eric Wastl.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
