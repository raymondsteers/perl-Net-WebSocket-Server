.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::WebSocket::Server 3pm"
.TH Net::WebSocket::Server 3pm "2017-03-05" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::WebSocket::Server \-  A straightforward Perl WebSocket server with minimal dependencies.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Simple echo server for \f(CW\*(C`utf8\*(C'\fR messages.
.PP
.Vb 1
\&    use Net::WebSocket::Server;
\&
\&    Net::WebSocket::Server\->new(
\&        listen => 8080,
\&        on_connect => sub {
\&            my ($serv, $conn) = @_;
\&            $conn\->on(
\&                utf8 => sub {
\&                    my ($conn, $msg) = @_;
\&                    $conn\->send_utf8($msg);
\&                },
\&            );
\&        },
\&    )\->start;
.Ve
.PP
Server that sends the current time to all clients every second.
.PP
.Vb 1
\&    use Net::WebSocket::Server;
\&
\&    my $ws = Net::WebSocket::Server\->new(
\&        listen => 8080,
\&        tick_period => 1,
\&        on_tick => sub {
\&            my ($serv) = @_;
\&            $_\->send_utf8(time) for $serv\->connections;
\&        },
\&    )\->start;
.Ve
.PP
Broadcast-echo server for \f(CW\*(C`utf8\*(C'\fR and \f(CW\*(C`binary\*(C'\fR messages with origin testing.
.PP
.Vb 1
\&    use Net::WebSocket::Server;
\&
\&    my $origin = \*(Aqhttp://example.com\*(Aq;
\&
\&    Net::WebSocket::Server\->new(
\&        listen => 8080,
\&        on_connect => sub {
\&            my ($serv, $conn) = @_;
\&            $conn\->on(
\&                handshake => sub {
\&                    my ($conn, $handshake) = @_;
\&                    $conn\->disconnect() unless $handshake\->req\->origin eq $origin;
\&                },
\&                utf8 => sub {
\&                    my ($conn, $msg) = @_;
\&                    $_\->send_utf8($msg) for $conn\->server\->connections;
\&                },
\&                binary => sub {
\&                    my ($conn, $msg) = @_;
\&                    $_\->send_binary($msg) for $conn\->server\->connections;
\&                },
\&            );
\&        },
\&    )\->start;
.Ve
.PP
See \*(L"listen\*(R" for an example of setting up an \s-1SSL \s0(\f(CW\*(C`wss://...\*(C'\fR) server.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the details of a WebSocket server and invokes the
provided callbacks whenever something interesting happens.  Individual
connections to the server are represented as
Net::WebSocket::Server::Connection
objects.
.SH "CONSTRUCTION"
.IX Header "CONSTRUCTION"
.ie n .IP """Net::WebSocket::Server\->new(\f(CI%opts\f(CW)""" 4
.el .IP "\f(CWNet::WebSocket::Server\->new(\f(CI%opts\f(CW)\fR" 4
.IX Item "Net::WebSocket::Server->new(%opts)"
.Vb 4
\&    Net::WebSocket::Server\->new(
\&        listen => 8080,
\&        on_connect => sub { ... },
\&    )
.Ve
.Sp
Creates a new \f(CW\*(C`Net::WebSocket::Server\*(C'\fR object with the given configuration.
Takes the following parameters:
.RS 4
.ie n .IP """listen""" 4
.el .IP "\f(CWlisten\fR" 4
.IX Item "listen"
If not a reference, the \s-1TCP\s0 port on which to listen.  If a reference, a
preconfigured IO::Socket::INET \s-1TCP\s0 server to use.  Default \f(CW80\fR.
.Sp
To create an \s-1SSL\s0 WebSocket server (such that you can connect to it via a
\&\f(CW\*(C`wss://...\*(C'\fR \s-1URL\s0), pass an object which acts like IO::Socket::INET
and speaks \s-1SSL,\s0 such as IO::Socket::SSL.  For example:
.Sp
.Vb 7
\&    my $ssl_server = IO::Socket::SSL\->new(
\&      Listen        => 5,
\&      LocalPort     => 8080,
\&      Proto         => \*(Aqtcp\*(Aq,
\&      SSL_cert_file => \*(Aq/path/to/server.crt\*(Aq,
\&      SSL_key_file  => \*(Aq/path/to/server.key\*(Aq,
\&    ) or die "failed to listen: $!";
\&
\&    Net::WebSocket::Server\->new(
\&        listen => $ssl_server,
\&        on_connect => sub { ... },
\&    )\->start;
.Ve
.ie n .IP """silence_max""" 4
.el .IP "\f(CWsilence_max\fR" 4
.IX Item "silence_max"
The maximum amount of time in seconds to allow silence on each connection's
socket.  Every \f(CW\*(C`silence_max/2\*(C'\fR seconds, each connection is checked for
whether data was received since the last check; if not, a WebSocket ping
message is sent.  Set to \f(CW0\fR to disable.  Default \f(CW20\fR.
.ie n .IP """tick_period""" 4
.el .IP "\f(CWtick_period\fR" 4
.IX Item "tick_period"
The amount of time in seconds between \f(CW\*(C`tick\*(C'\fR events.  Set to \f(CW0\fR to disable.
Default \f(CW0\fR.
.ie n .IP """on_\f(CW$event\f(CW""" 4
.el .IP "\f(CWon_\f(CW$event\f(CW\fR" 4
.IX Item "on_$event"
The callback to invoke when the given \f(CW$event\fR occurs, such as \f(CW\*(C`on_connect\*(C'\fR.
See \*(L"\s-1EVENTS\*(R"\s0.
.ie n .IP """watch_readable""" 4
.el .IP "\f(CWwatch_readable\fR" 4
.IX Item "watch_readable"
.PD 0
.ie n .IP """watch_writable""" 4
.el .IP "\f(CWwatch_writable\fR" 4
.IX Item "watch_writable"
.PD
Each of these takes an \fIarrayref\fR of \f(CW\*(C`$filehandle => $callback\*(C'\fR pairs to be
passed to the corresponding method.  Default \f(CW\*(C`[]\*(C'\fR.  See
\&\fIwatch_readable()\fR and
\&\fIwatch_writable()\fR.  For example:
.Sp
.Vb 10
\&    Net::WebSocket::Server\->new(
\&        # ...other relevant arguments...
\&        watch_readable => [
\&            \e*STDIN => \e&on_stdin,
\&        ],
\&        watch_writable => [
\&            $log1_fh => sub { ... },
\&            $log2_fh => sub { ... },
\&        ],
\&    )\->start;
.Ve
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """on(\f(CI%events\f(CW)""" 4
.el .IP "\f(CWon(\f(CI%events\f(CW)\fR" 4
.IX Item "on(%events)"
.Vb 3
\&    $server\->on(
\&        connect => sub { ... },
\&    );
.Ve
.Sp
Takes a list of \f(CW\*(C`$event => $callback\*(C'\fR pairs; \f(CW$event\fR names should not
include an \f(CW\*(C`on_\*(C'\fR prefix.  Typically, events are configured once via the
constructor rather than later via this method.  See \*(L"\s-1EVENTS\*(R"\s0.
.ie n .IP """start()""" 4
.el .IP "\f(CWstart()\fR" 4
.IX Item "start()"
Starts the WebSocket server; registered callbacks will be invoked as
interesting things happen.  Does not return until \*(L"shutdown\*(R" in \fIshutdown()\fR is
called.
.ie n .IP """connections()""" 4
.el .IP "\f(CWconnections()\fR" 4
.IX Item "connections()"
Returns a list of the current
Net::WebSocket::Server::Connection
objects.
.ie n .IP """disconnect(\f(CI$socket\f(CW)""" 4
.el .IP "\f(CWdisconnect(\f(CI$socket\f(CW)\fR" 4
.IX Item "disconnect($socket)"
Immediately disconnects the given \f(CW$socket\fR without calling the corresponding
connection's callback or cleaning up the socket.  For that, see
\&\*(L"disconnect\*(R" in Net::WebSocket::Server::Connection, which ultimately calls this
function anyway.
.ie n .IP """shutdown()""" 4
.el .IP "\f(CWshutdown()\fR" 4
.IX Item "shutdown()"
Closes the listening socket and cleanly disconnects all clients, causing the
\&\fIstart()\fR method to return.
.ie n .IP """watch_readable(\f(CI@pairs\f(CW)""" 4
.el .IP "\f(CWwatch_readable(\f(CI@pairs\f(CW)\fR" 4
.IX Item "watch_readable(@pairs)"
.Vb 3
\&    $server\->watch_readable(
\&      \e*STDIN => \e&on_stdin,
\&    );
.Ve
.Sp
Takes a list of \f(CW\*(C`$filehandle => $callback\*(C'\fR pairs.  The given filehandles
will be monitored for readability; when readable, the given callback will be
invoked.  Arguments passed to the callback are the server itself and the
filehandle which became readable.
.ie n .IP """watch_writable(\f(CI@pairs\f(CW)""" 4
.el .IP "\f(CWwatch_writable(\f(CI@pairs\f(CW)\fR" 4
.IX Item "watch_writable(@pairs)"
.Vb 4
\&    $server\->watch_writable(
\&      $log1_fh => sub { ... },
\&      $log2_fh => sub { ... },
\&    );
.Ve
.Sp
Takes a list of \f(CW\*(C`$filehandle => $callback\*(C'\fR pairs.  The given filehandles
will be monitored for writability; when writable, the given callback will be
invoked.  Arguments passed to the callback are the server itself and the
filehandle which became writable.
.ie n .IP """watched_readable([\f(CI$filehandle\f(CW])""" 4
.el .IP "\f(CWwatched_readable([\f(CI$filehandle\f(CW])\fR" 4
.IX Item "watched_readable([$filehandle])"
.PD 0
.ie n .IP """watched_writable([\f(CI$filehandle\f(CW])""" 4
.el .IP "\f(CWwatched_writable([\f(CI$filehandle\f(CW])\fR" 4
.IX Item "watched_writable([$filehandle])"
.PD
These methods return a list of \f(CW\*(C`$filehandle => $callback\*(C'\fR pairs that are
curently being watched for readability / writability.  If a filehandle is
given, its callback is returned, or \f(CW\*(C`undef\*(C'\fR if it isn't being watched.
.ie n .IP """unwatch_readable(\f(CI@filehandles\f(CW)""" 4
.el .IP "\f(CWunwatch_readable(\f(CI@filehandles\f(CW)\fR" 4
.IX Item "unwatch_readable(@filehandles)"
.PD 0
.ie n .IP """unwatch_writable(\f(CI@filehandles\f(CW)""" 4
.el .IP "\f(CWunwatch_writable(\f(CI@filehandles\f(CW)\fR" 4
.IX Item "unwatch_writable(@filehandles)"
.PD
These methods cause the given filehandles to no longer be watched for
readability / writability.
.SH "EVENTS"
.IX Header "EVENTS"
Attach a callback for an event by either passing \f(CW\*(C`on_$event\*(C'\fR parameters to the
constructor or by passing \f(CW$event\fR parameters to the
\&\fIon()\fR method.
.ie n .IP """connect(\f(CI$server\f(CW, \f(CI$connection\f(CW)""" 4
.el .IP "\f(CWconnect(\f(CI$server\f(CW, \f(CI$connection\f(CW)\fR" 4
.IX Item "connect($server, $connection)"
Invoked when a new connection is made.  Use this event to configure the
newly-constructed
Net::WebSocket::Server::Connection
object.  Arguments passed to the callback are the server accepting the
connection and the new connection object itself.
.ie n .IP """tick(\f(CI$server\f(CW)""" 4
.el .IP "\f(CWtick(\f(CI$server\f(CW)\fR" 4
.IX Item "tick($server)"
Invoked every tick_period seconds, or never if
tick_period is \f(CW0\fR.  Useful to perform actions that aren't in
response to a message from a client.  Arguments passed to the callback are only
the server itself.
.ie n .IP """shutdown(\f(CI$server\f(CW)""" 4
.el .IP "\f(CWshutdown(\f(CI$server\f(CW)\fR" 4
.IX Item "shutdown($server)"
Invoked immediately before the server shuts down due to the \fIshutdown()\fR
method being invoked.  Any client connections will still be available until
the event handler returns.  Arguments passed to the callback are only the
server that is being shut down.
.SH "CAVEATS"
.IX Header "CAVEATS"
When loaded (via \f(CW\*(C`use\*(C'\fR, at \f(CW\*(C`BEGIN\*(C'\fR\-time), this module installs a \f(CW\*(C`SIGPIPE\*(C'\fR handler of \f(CW\*(AqIGNORE\*(Aq\fR.  Write failures are handled situationally rather than in a global \f(CW\*(C`SIGPIPE\*(C'\fR handler, but this still must be done to prevent the signal from killing the server process.  If you require your own \f(CW\*(C`SIGPIPE\*(C'\fR handler, assign to \f(CW$SIG{PIPE}\fR after this module is loaded.
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Wastl, \f(CW\*(C`<topaz at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-net\-websocket\-server at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net\-WebSocket\-Server>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Net::WebSocket::Server
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Net\-WebSocket\-Server>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Net\-WebSocket\-Server>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Net\-WebSocket\-Server>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Net\-WebSocket\-Server/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Eric Wastl.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS\s0' \s-1AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR\s0 NON-INFRINGEMENT \s-1ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
